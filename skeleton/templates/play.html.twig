{% extends 'base.html.twig' %}

{% block title %}Jugar - TalaTrivia{% endblock %}

{% block body %}
    <div 
        class="max-w-xl mx-auto p-4 sm:p-6 lg:p-8 bg-gray-50"
        data-participation-id="{{ Participation.getId() }}"
        data-questions-json="{{ questions|json_encode(constant('JSON_PRETTY_PRINT') b-or constant('JSON_UNESCAPED_UNICODE')) }}">
        <h2 class="text-3xl font-extrabold text-gray-900 mb-6 text-center">TalaTrivia</h2>
        <form id="play-form" class="bg-white p-6 rounded-xl shadow-2xl">
            <div id="questions-container">
                {% if questions is empty %}
                    <p class="text-center text-red-600 font-bold text-lg">⚠️ ¡Error! No se cargaron preguntas para esta Trivia. ⚠️</p>
                {% else %}
                    {% for q in questions %}
                        <fieldset 
                            id="question-{{ q.id }}" 
                            class="question-card space-y-4" 
                            data-question-id="{{ q.id }}" 
                            data-index="{{ loop.index0 }}" 
                            style="display: none;">
                            <legend class="text-xl font-bold text-indigo-700 mb-4 border-b pb-2">
                                Pregunta {{ loop.index }} de {{ questions|length }}:
                            </legend>
                            <p class="text-gray-800 text-lg font-semibold">{{ q.text }}</p>

                            <div class="space-y-3 pt-2 row">
                                {% for a in q.answers %}
                                    <label for="answer_{{ a.id }}" class="col-lg-12 flex items-center p-3">
                                        <input type="radio" id="answer_{{ a.id }}" name="question_{{ q.id }}" value="{{ a.id }}" class="form-radio h-5 w-5 text-indigo-600 focus:ring-indigo-500">
                                        <span class="ml-3 text-gray-700 font-medium">{{ a.text }}</span>
                                    </label>
                                {% endfor %}
                            </div>
                        </fieldset>
                    {% endfor %}
                {% endif %}
            </div>
            
            {# Controles de Navegación #}
            <div id="navigation-controls" class="flex justify-between pt-4 row">
              <div class="col-lg-6 mb-4  font-medium text-gray-600" style="text-align: right;">
                <button type="button" id="prev-btn" class="btn btn-primary px-4 py-2 text-sm font-medium rounded-lg" disabled>
                    <i class="fas fa-arrow-left mr-2"></i> Anterior
                </button>
              </div>
              <div class="col-lg-6 mb-4 text-center font-medium text-gray-600">
                <button type="button" id="next-btn" class="btn btn-success px-6 py-2 text-sm font-medium rounded-lg" >
                    Siguiente <i class="fas fa-arrow-right ml-2"></i>
                </button>
              </div>
              <div class="col-lg-6 mb-4 text-center font-medium text-gray-600">
                <button type="button" id="submit-btn" class="btn btn-success px-6 py-2 text-sm font-medium rounded-lg" style="display: none;">
                    Enviar Respuestas <i class="fas fa-paper-plane ml-2"></i>
                </button>
              </div>
            </div>
        </form>

        <div id="result" class="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-gray-700" style="display: none;">
            <p class="font-bold text-lg">Resultado de la Trivia:</p>
            <pre id="result-content" class="whitespace-pre-wrap"></pre>
        </div>
    </div> 
    {# Modal de Puntaje Final #}
    <div id="score-modal" class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center z-50 transition-opacity duration-300" style="display: none;">
        <div class="bg-white p-8 rounded-xl shadow-2xl max-w-sm w-full transform transition-all duration-300 scale-95 opacity-0" id="modal-content-area">
            <h3 class="text-3xl font-extrabold text-indigo-700 text-center mb-4">¡Trivia Finalizada!</h3>
            <p class="text-center text-gray-600 mb-6">Tu puntaje es:</p>
            
            <div class="text-center">
                <span id="final-score" class="text-7xl font-black text-green-600 block mb-6">0</span>
            </div>

            <button onclick="window.location.reload()" class="w-full py-3 bg-indigo-600 text-white rounded-lg font-semibold hover:bg-indigo-700 transition duration-150">
                Aceptar
            </button>
        </div>
    </div>
{% endblock %}
{% block javascript %}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const container = document.querySelector('.max-w-xl');
        const participationId = container.dataset.participationId;
        
        const cards = document.querySelectorAll('.question-card');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');
        const resultDiv = document.getElementById('result');
        const resultContent = document.getElementById('result-content');
        const selectedAnswers = new Map();
        let currentQuestionIndex = 0;
        const totalQuestions = cards.length;

        if (totalQuestions === 0) {
            document.getElementById('navigation-controls').style.display = 'none';
            return; 
        }

        /**
         * Guarda la respuesta actual seleccionada en el mapa 'selectedAnswers'.
         * @returns {number | null} 
         */
        function saveCurrentAnswer() {
            const currentCard = cards[currentQuestionIndex];
            const selected = currentCard.querySelector('input[type="radio"]:checked');
            
            if (selected) {
                const questionId = parseInt(currentCard.dataset.questionId);
                const answerId = parseInt(selected.value);
                selectedAnswers.set(questionId, answerId);
                return answerId;
            }
            return null;
        }

        function updateUI() {
            cards.forEach((card, index) => {
                card.style.display = index === currentQuestionIndex ? 'block' : 'none';
            });
            const currentCard = cards[currentQuestionIndex];
            const questionId = parseInt(currentCard.dataset.questionId);
            const savedAnswerId = selectedAnswers.get(questionId);
            
            if (savedAnswerId) {
                const savedInput = currentCard.querySelector(`input[value="${savedAnswerId}"]`);
                if (savedInput) savedInput.checked = true;
            }
            prevBtn.disabled = currentQuestionIndex === 0;

            if (currentQuestionIndex === totalQuestions - 1) {
                nextBtn.style.display = 'none'; 
                submitBtn.style.display = 'block'; 
            } else {
                nextBtn.style.display = 'block'; 
                submitBtn.style.display = 'none'; 
            }
        }

        nextBtn.addEventListener('click', () => {
            const selectedId = saveCurrentAnswer();
            
            if (selectedId === null) {
                alert('Por favor, selecciona una respuesta antes de continuar.');
                return; 
            }

            if (currentQuestionIndex < totalQuestions - 1) {
                currentQuestionIndex++;
                updateUI();
            }
        });

        prevBtn.addEventListener('click', () => {
            saveCurrentAnswer();
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                updateUI();
            }
        });
        //respuesta de api para enviar las respuestas
        document.getElementById('submit-btn').addEventListener('click', async function() {
            const selectedId = saveCurrentAnswer();
            
            if (selectedId === null) {
                alert('Por favor, selecciona una respuesta para la última pregunta antes de enviar.');
                return; 
            }            
            this.disabled = true;

            // Formato de las respuestas para el API
            const answersArray = Array.from(selectedAnswers, ([question_id, answer_id]) => ({ question_id, answer_id }));
            document.getElementById('play-form').style.opacity = '0.5';

            const res = await fetch(`/api/play/Participation/${participationId}/submit`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ answers: answersArray })
            });

            const json = await res.json();
            finalScoreSpan.innerText = json.score;
            scoreModal.style.display = 'flex';
            setTimeout(() => {
                modalContentArea.classList.remove('scale-95', 'opacity-0');
                modalContentArea.classList.add('scale-100', 'opacity-100');
            }, 10);
            prevBtn.disabled = true;
            nextBtn.disabled = true;
        });

        // Inicializa la interfaz al cargar la página
        updateUI();
    });
</script>
{% endblock %}